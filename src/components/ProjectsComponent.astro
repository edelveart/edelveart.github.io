---
// It is a perfect access point to this fascinating area where music, mathematics and computing at the highest level come together. Playing with ts-tonnetz will lead you to propose questions and new musical systems in an expressive and creative way.
import HorizontalCard from "./HorizontalCard.astro";
import Branch from "@icons/Branch.astro";
import type { ProjectType } from "./HorizontalCard.astro";

import ModularFormsImg from "../assets/libraries-webp/modular_forms.webp";
import ToposImg from "../assets/libraries-webp/topos-docs.webp";
import TsTonnetz from "../assets/libraries-webp/ts-tonnetz.webp";
import FigurateNumbersRuby from "../assets/libraries-webp/figurate_numbers.webp";
import FigurateNumbersLua from "../assets/libraries-webp/figurate-numbers-lua.webp";
import FiguratenumPython from "../assets/libraries-webp/figuratenum.webp";
import FigNumbersTS from "../assets/libraries-webp/fignumbers.webp";

export const allProjects = [
  {
    title: "ts-tonnetz in the New Live Coding Environment Topos",
    img: ToposImg,
    desc: "Since December 2023, my library 'ts-tonnetz' is part of the Topos live coding environment created by Raphaël Forment and Miika Alonen. It serves as a dependency for Ziffers, a numerical notation system. For your convenience, I wrote documentation that synthesizes two PhD theses on Mathematical Music Theory and other key research.",
    url: "https://topos.live/#ziffers_tonnetz",
    badge: "Topos | TypeScript",
  },
  {
    title: "Modular Forms Meets Sonic Pi",
    img: ModularFormsImg,
    desc: "An early-stage toolkit for exploring modular forms and elliptic curves through Sonic Pi. It makes abstract math concepts like Eisenstein series Eₖ(τ), Dedekind eta functions η(τ), SL(2,ℤ) group, theta functions ϑ, Hecke operators Tₚ, Dirichlet characters χ, elliptic curves over ℚ and 𝔽ₚ, p-adic fields, creatively accessible. Inspired by SageMath, Pari/GP, and the LMFDB database, it aims to bridge deep number theory with algorithmic music.",
    url: "https://rubygems.org/gems/modular_forms",
    badge: "RubyGems | Ruby",
  },
  {
    title: "New Figurate Numbers Package for Python",
    img: FiguratenumPython,
    desc: `A library for generating 235 infinite figurate number sequences, revealing their patterns across multiple dimensions. Based on the book "Figurate Numbers" (2012) by Elena Deza and Michel Deza.`,
    url: "https://pypi.org/project/figuratenum/",
    badge: "PyPI | Python",
  },
  {
    title: "ts-tonnetz: A New Math and Music Library for Live Coders",
    img: TsTonnetz,
    desc: "A complete Neo-Riemannian Theory library (67 transformations, graphs, and cycles) for musicians, mathematicians, and engineers, built on two doctoral theses and key research.",
    url: "https://www.npmjs.com/package/ts-tonnetz",
    badge: "npm | TypeScript",
  },
  {
    title: "Ruby Module to Generate Infinite Sequences of Figurate Numbers",
    img: FigurateNumbersRuby,
    desc: `This Ruby gem enables the generation of 241 infinite sequences of plane, spatial, and multidimensional figurate numbers. It is designed for ,use in your math projects or with Sonic Pi. Based on the book "Figurate Numbers" (2012) by Elena Deza and Michel Deza.`,
    url: "https://rubygems.org/gems/figurate_numbers",
    badge: "RubyGems | Ruby",
  },
  {
    title: "npm Package for Figurate Numbers",
    img: FigNumbersTS,
    desc: `A library for generating infinite figurate number sequences, connected to geometric shapes in multiple dimensions. Based on "Figurate Numbers" (2012) by Elena Deza and Michel Deza.`,
    url: "https://www.npmjs.com/package/fignumbers",
    badge: "npm | TypeScript",
  },
  {
    title: "Figurate Numbers Library for Lua",
    img: FigurateNumbersLua,
    desc: "figurate-numbers is the most comprehensive and specialized module for figurate numbers written in Lua to date. It implements 235 infinite number sequences based on the remarkable book Figurate Numbers by Elena Deza and Michel Deza, published in 2012.",
    url: "https://luarocks.org/modules/edelveart/figurate-numbers",
    badge: "LuaRocks | Lua",
  },
];

type Props = {
  projects: ProjectType[];
  indices: number[];
  headTitle: string;
};

const { projects, indices, headTitle }: Props = Astro.props;
const filteredProjects = indices
  ? indices.map((index: number) => projects[index]).filter(Boolean)
  : projects;
---

<div class="text-2xl w-full font-bold flex items-center mt-8 mb-6" id="PROJECTS">
  <Branch class="ml-0 mr-4" />
  {headTitle}
</div>

<section class="mb-10 mt-0">
  {
    filteredProjects.map((project: ProjectType, index: number) => (
      <>
        <HorizontalCard
          key={index}
          title={project.title}
          img={project.img}
          desc={project.desc}
          url={project.url}
          badge={project.badge}
        />
        {index < filteredProjects.length - 1 && (
          <div class="divider my-1 before:bg-transparent after:bg-transparent" />
        )}
      </>
    ))
  }
</section>
